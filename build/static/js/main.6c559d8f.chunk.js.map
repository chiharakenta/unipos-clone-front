{"version":3,"sources":["component/Function.js","component/AddPostForm.js","store/Store.js","component/DeletePostButton.js","component/Home.js","component/Login.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","AddPostForm","props","state","text","textChange","bind","handleSubmit","e","this","setState","target","value","url","data","preventDefault","process","message","post","then","results","console","log","catch","onSubmit","onChange","required","id","type","Component","initdata","isSignedIn","posts","created_at","updated_at","claps","peerReducer","action","signInReduce","readPostsReduce","createPostReduce","deletePostReduce","unshift","newPosts","i","newSignedIn","signIn","createStore","DeletePostButton","handleClick","delete","response","dispatch","onClick","connect","Home","window","gapi","load","client","init","clientId","scope","auth2","getAuthInstance","get","location","href","map","Login","loginWithGoogle","logoutFromGoogle","signOut","renderAuth","App","exact","path","component","Boolean","hostname","match","persistConfig","key","storage","stateReconciler","autoMergeLevel2","persistedReducer","persistReducer","store","applyMiddleware","thunk","pstore","persistStore","ReactDOM","render","loading","persistor","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c559d8f.chunk.js","sourcesContent":["export const axios = require('axios');\n\nexport function getData(url) {\n  axios.post(url)\n    .then((results) => {\n      console.log(results);\n    })\n    .catch((data) => {\n      console.log(data);\n    })\n}\n\nexport function postData(url, data) {\n  axios.post(url, data)\n    .then((results) => {\n      console.log(results);\n    })\n    .catch((data) => {\n      console.log(data);\n    })\n}\n\nexport function deleteData(url) {\n  axios.delete(url)\n    .then((results) => {\n      console.log(results)\n    })\n    .catch((data) => {\n      console.log(data)\n    })\n}\n\nexport function googleSignInCheck() {\n  window.gapi.load('client:auth2', () => {\n    window.gapi.client.init({\n      clientId: process.env.REACT_APP_CLIENT_ID,\n      scope: \"email\"\n    }).then(() => {\n      const isSignedIn = window.gapi.auth2.getAuthInstance().isSignedIn.get();\n      if (!isSignedIn) {\n        window.location.href = '/login';\n      };\n    })\n  });\n}","import React, { Component } from 'react';\nimport { postData } from './Function';\n\nclass AddPostForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: ''\n    };\n    this.textChange = this.textChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  textChange(e) {\n    this.setState({\n      text: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    postData(`${process.env.REACT_APP_API_URL}/api/v1/posts`, { message: this.state.text });\n    this.setState({\n      text: ''\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <textarea onChange={this.textChange} value={this.state.text} required></textarea>\n        <input id=\"postButton\" type=\"submit\" />\n      </form>\n    )\n  }\n}\n\nexport default AddPostForm;","import { createStore } from 'redux';\n\nconst initdata = {\n  isSignedIn: null,\n  posts: [\n    {\n      id: 1,\n      message: 'fuga',\n      created_at: '2020-01-24T03:24:04.025Z',\n      updated_at: '2020-01-24T03:24:04.025Z'\n    }\n  ],\n  claps: []\n};\n\n\n// レデューサー\nexport function peerReducer(state = initdata, action) {\n  switch (action.type) {\n    case 'SIGN_IN': {\n      return signInReduce(state, action);\n    }\n    case 'READ_POSTS': {\n      return readPostsReduce(state, action);\n    }\n    case 'CREATE_POSTS': {\n      return createPostReduce(state, action);\n    }\n    case 'DELETE_POSTS': {\n      return deletePostReduce(state, action);\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n// レデュースアクション\n\nfunction readPostsReduce(state, action) {\n  let newPosts = action.posts;\n  return {\n    posts: newPosts,\n    isSignedIn: state.isSignedIn\n  }\n}\n\nfunction createPostReduce(state, action) {\n  let newPosts = this.props.posts.unshift(action.post);\n  return {\n    posts: newPosts,\n    isSignedIn: state.isSignedIn\n  }\n}\n\nfunction deletePostReduce(state, action) {\n  let newPosts = [];\n  for(let i in this.props.posts) {\n    if (this.props.posts[i].id != action.post.id) {\n      newPosts.unshift(this.props.posts[i].id);\n    }\n  }\n  return {\n    posts: newPosts,\n    isSignedIn: state.isSignedIn\n  }\n}\n\nfunction signInReduce(state, action) {\n  let newSignedIn = action.isSignedIn;\n  return {\n    posts: state.posts,\n    isSignedIn: newSignedIn\n  }\n}\n\n// アクションクリエーター\n\n// ユーザー変更のアクション\nexport function signIn(isSignedIn) {\n  return {\n    type: 'SIGN_IN',\n    isSignedIn: isSignedIn\n  }\n}\n\nexport function readPosts(posts) {\n  return {\n    type: 'READ_POSTS',\n    posts: posts\n  };\n}\n\nexport function createPost(post) {\n  return {\n    type: 'CREATE_POSTS',\n    post: post\n  };\n}\n\nexport function deletePost(post) {\n  return {\n    type: 'DELETE_POSTS',\n    post: post\n  };\n}\n\n// ストアを作成\nexport default createStore(peerReducer);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { deletePost } from '../store/Store';\nconst axios = require('axios');\n\nclass DeletePostButton extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    axios.delete(`${process.env.REACT_APP_API_URL}/api/v1/posts/${e.target.id}`).then((response) => {\n        this.props.dispatch(deletePost(response.data.data))\n      }).catch((response) => {\n        console.log(response)\n      })\n  }\n\n  render() {\n    return (\n      <button id={this.props.id} onClick={this.handleClick}>この投稿を削除</button>\n    )\n  }\n}\nexport default connect((state) => state)(DeletePostButton);;\n","import React, { Component } from 'react';\nimport AddPostForm from './AddPostForm';\nimport DeletePostButton from './DeletePostButton';\nimport { connect } from 'react-redux';\nimport { readPosts } from '../store/Store';\nimport { googleSignInCheck } from './Function';\n\nconst axios = require('axios');\n\nclass Home extends Component {\n  componentDidMount() {\n    googleSignInCheck();\n    axios.get(`${process.env.REACT_APP_API_URL}/api/v1/posts`)\n      .then((results) => {\n        console.log(results);\n        let action = readPosts(results.data.data);\n        this.props.dispatch(action);\n      })\n      .catch((data) => {\n        console.log(data)\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <AddPostForm />\n        <ul>\n          {this.props.posts.map((post) => (\n            <li>\n              {post.message} <DeletePostButton id={post.id} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default connect((state) => state)(Home);;\n","import React, { Component } from 'react';\nimport { signIn } from '../store/Store';\nimport { connect } from 'react-redux';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSignedIn: null\n    };\n  }\n\n  componentDidMount() {\n    window.gapi.load('client:auth2', () => {\n      window.gapi.client.init({\n        clientId: process.env.REACT_APP_CLIENT_ID,\n        scope: \"email\"\n      })\n    });\n  }\n\n  renderAuth() {\n    if (this.state.isSignedIn === null) {\n      return <div>i dont know your google account</div>\n    } else if (this.state.isSignedIn) {\n      return <div>login with google!!</div>\n    } else {\n      return <div>I can not see your google account!!</div>\n    }\n  }\n\n  loginWithGoogle = () => {\n    window.gapi.auth2.getAuthInstance().signIn()\n      .then(() => {\n        const auth = window.gapi.auth2.getAuthInstance();\n        let action = signIn(auth.isSignedIn.get());\n        this.props.dispatch(action);\n        window.location.href = '/'\n      });\n  }\n\n  logoutFromGoogle = () => {\n    window.gapi.auth2.getAuthInstance().signOut()\n    .then(() => {\n      const auth = window.gapi.auth2.getAuthInstance();\n      let action = signIn(auth.isSignedIn.get());\n      this.props.dispatch(action);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderAuth()}\n        <button onClick={this.loginWithGoogle}>\n          login with google\n        </button>\n        <button onClick={this.logoutFromGoogle}>\n          logout from google\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect((state) => state)(Login);","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Home from './component/Home';\nimport Login from './component/Login';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <div>\n            <Route exact path='/' component={Home} />\n            <Route exact path='/login' component={Login} />\n          </div>\n        </BrowserRouter>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport { peerReducer } from './store/Store';\nimport thunk from 'redux-thunk';\n\n\n// Redux Persistの設定\nconst persistConfig = {\n  key: 'peer',\n  storage,\n  stateReconciler: autoMergeLevel2\n};\n\n// パーシストレデューサーの作成\nconst persistedReducer = persistReducer(persistConfig, peerReducer);\n\n// ストア、パーシスターの作成\nlet store = createStore(persistedReducer, applyMiddleware(thunk));\nlet pstore = persistStore(store);\n\n// 表示をレンダリング\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<p>loading...</p>} persistor={pstore}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}